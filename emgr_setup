#!/usr/bin/env bash

# Copyright 2016-2017 Chris Diamand
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


if [[ -n ${BASH_VERSION+x} ]]; then
    export _EMGR_install_dir=`dirname "${BASH_SOURCE[0]}"`
    source "$_EMGR_install_dir/setup.bash"
elif [[ -n ${ZSH_VERSION+x} ]]; then
    export _EMGR_install_dir=${0:a:h}
    source "$_EMGR_install_dir/setup.zsh"
fi

source "$_EMGR_install_dir/utils"

function _EMGR_get_env_name_from_path() {
    local env_path=`_EMGR_realpath "$1"`
    for env_dir in "${EMGR_DIRS[@]}"; do
        env_dir=`_EMGR_realpath "$env_dir"`
        if [[ "$env_path" == "$env_dir"* ]]; then
            local rel_path="${env_path#$env_dir/}"
            echo "${rel_path%.env.sh}"
            return 0
        fi
    done
    return 1
}

function _EMGR_get_dir_for_env_absolute() {
    local env="$1" env_dir=
    for env_dir in "${EMGR_DIRS[@]}"; do
        if [[ -d "$env_dir" && -f "$env_dir/$env.env.sh" ]]; then
            echo "$env_dir"
            return 0
        fi
    done
    return 1
}

function _EMGR_path_for_env_absolute() {
    local env="$1"
    local env_dir=`_EMGR_get_dir_for_env_absolute "$env"`

    if [[ -n "$env_dir" ]]; then
        echo "$env_dir/$env.env.sh"
        return 0
    else
        return 1
    fi
}

# If a matching env exists relative to the currently loaded env's path,
# expand to the full path.
function _EMGR_path_for_env_relative() {
    local env="$1"
    local current_env_dir=`_EMGR_path_for_env_absolute "$EMGR_ENV_LOCAL"`
    current_env_dir=`dirname "$current_env_dir"`
    local expanded_path="$current_env_dir/$env.env.sh"

    if [[ -f "$expanded_path" ]]; then
        echo "$expanded_path"
    else
        _EMGR_path_for_env_absolute "$env"
    fi
}

function _EMGR_is_readonly_var() {
    (unset "$1" >&/dev/null) || return 0
    return 1
}

function _EMGR_restore() {
    echo "Restoring from '$_EMGR_env_backup'"
    if [[ -z "$_EMGR_env_backup" || ! -f "$_EMGR_env_backup" ]]; then
        echo "Error: '$_EMGR_env_backup' not set or doesn't exist"
        return 1
    fi

    _EMGR_clear_env
    source "$_EMGR_env_backup"
}

function _EMGR_save() {
    mkdir -p "/tmp/emgr/$USER"
    export _EMGR_env_backup=`mktemp /tmp/emgr/$USER/XXXXXXXX.sh`

    echo "Saving to '$_EMGR_env_backup'"

    echo "# env `date`" > "$_EMGR_env_backup"

    # Call shell-specific env-saving function
    _EMGR_write_env "$_EMGR_env_backup"
}

function _EMGR_load() {
    if [[ -n ${EMGR_TOPLEVEL_ENVS+x} ]]; then
        _EMGR_restore
    else
        _EMGR_save
    fi

    EMGR_TOPLEVEL_ENVS=( "$@" )

    source "$_EMGR_install_dir/load_env"
    _EMGR_res="$?"

    if [[ "$_EMGR_res" -ne 0 ]]; then
        echo "Error:" `_EMGR_path_for_env_absolute "$EMGR_TOPLEVEL_ENVS"` "returned $_EMGR_res"
        _EMGR_clear
        return 1
    fi
}

function _EMGR_clear() {
    if [[ -z ${EMGR_TOPLEVEL_ENVS+x} ]]; then
        echo "Error: No env loaded"
        return 1
    fi
    _EMGR_restore
    rm -f "$_EMGR_env_backup"
    unset _EMGR_env_backup
    unset EMGR_TOPLEVEL_ENVS
    unset EMGR_ENV_CURRENT
}

function _EMGR_reload() {
    if [[ -z ${EMGR_TOPLEVEL_ENVS+x} ]]; then
        echo "Error: No env loaded"
        return 1
    fi
    echo "Reloading '${EMGR_TOPLEVEL_ENVS[@]}'"
    _EMGR_load "${EMGR_TOPLEVEL_ENVS[@]}"
    return $?
}

function _EMGR_list_envs() {
    local env_dir=
    for env_dir in ${EMGR_DIRS[@]}; do
        if [[ -d "$env_dir" ]]; then
            pushd "$env_dir" >&/dev/null
            find -name '*.env.sh' -printf '  %P\n' | \
                sed 's/\([a-zA-Z0-9]*\)\.env\.sh/\1/'
            popd >&/dev/null
        fi
    done
}

function _EMGR_edit() {
    local env_name= env_path=
    if [[ $# -gt 0 ]]; then
        env_name="$1"
    elif [[ -n ${EMGR_TOPLEVEL_ENVS+empty_if_not_set} ]]; then
        env_name="${EMGR_TOPLEVEL_ENVS[-1]}"
    else
        echo "Usage: emgr --edit [env_name]"
        return 1
    fi

    env_path=`_EMGR_path_for_env_absolute "$env_name"`
    if [[ -z "$env_path" ]]; then
        echo "Error: Can't find env '$env_name'"
        return 1
    fi

    if [[ -n ${EDITOR+empty_if_not_set} ]]; then
        "$EDITOR" "$env_path"
    elif which xdg-open>&/dev/null; then
        xdg-open "$env_path"
    fi
}

function _EMGR_help() {
    echo "Usage: emgr --clear|--reload|ENV_NAME"
    echo "Available enviroments:"
    _EMGR_list_envs
    return 1
}

function emgr() {
    if [[ $# -lt 1 ]]; then
        _EMGR_help
        return $?
    fi

    if [[ "$1" == "--clear" ]]; then
        _EMGR_clear
    elif [[ "$1" == "--edit" ]]; then
        shift
        _EMGR_edit $@
    elif [[ "$1" == "--reload" ]]; then
        _EMGR_reload
    else
        _EMGR_load $@
    fi
    return $?
}

function _EMGR_completion() {
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev=""
    if [[ $COMP_CWORD -gt 0 ]]; then
        prev="${COMP_WORDS[COMP_CWORD-1]}"
    fi
    if [[ "$prev" == "--edit" ]]; then
        COMPREPLY=( $(compgen -W "`_EMGR_list_envs`" -- "$cur") )
    else
        COMPREPLY=( $(compgen -W "--clear --edit --reload `_EMGR_list_envs`" -- "$cur") )
    fi
}
if which complete >&/dev/null; then
    complete -F _EMGR_completion emgr >&/dev/null
fi
